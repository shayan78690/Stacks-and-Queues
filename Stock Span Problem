import java.util.Stack;

class StockSpanner {

    static class Pair {
        int val;
        int index;

        Pair(int val, int index) {
            this.val = val;
            this.index = index;
        }
    }

    Stack<Pair> stack;
    int index;

    public StockSpanner() {
        stack = new Stack<>();
        index = -1;
    }

    public int next(int price) {
        index++;

        while (!stack.isEmpty() && stack.peek().val <= price) {
            stack.pop();
        }

        int ans = stack.isEmpty() ? index + 1 : index - stack.peek().index;

        stack.push(new Pair(price, index));

        return ans;
    }
}

/**
 * Example usage:
 * StockSpanner obj = new StockSpanner();
 * int param_1 = obj.next(price);
 */









class StockSpanner {
List<Integer> arr;
    public StockSpanner() {
        arr = new ArrayList<>();
    }
    
    public int next(int price) {
        arr.add(price);
        int count = 1;
        for(int i = arr.size()-2; i >= 0; i--) {
            if(arr.get(i) <= price) {
                count++;
            } else {
                break;
            }
        }
        return count;
    }
}

/**
 * Your StockSpanner object will be instantiated and called as such:
 * StockSpanner obj = new StockSpanner();
 * int param_1 = obj.next(price);
 */
