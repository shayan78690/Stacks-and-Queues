import java.util.Stack;

class InfixToPrefix {
    
    static int Prec(char ch) {
        switch (ch) {
            case '+':
            case '-':
                return 1;
            case '*':
            case '/':
                return 2;
            case '^':
                return 3;
        }
        return -1;
    }

    static String reverse(String exp) {
        StringBuilder sb = new StringBuilder(exp);
        return sb.reverse().toString();
    }

    static String infixToPostfix(String exp) {
        StringBuilder result = new StringBuilder();
        Stack<Character> stack = new Stack<>();

        for (int i = 0; i < exp.length(); i++) {
            char c = exp.charAt(i);

            if (Character.isLetterOrDigit(c)) {
                result.append(c);
            } else if (c == '(') {
                stack.push(c);
            } else if (c == ')') {
                while (!stack.isEmpty() && stack.peek() != '(') {
                    result.append(stack.pop());
                }
                stack.pop();
            } else {
                while (!stack.isEmpty() && Prec(c) <= Prec(stack.peek())) {
                    result.append(stack.pop());
                }
                stack.push(c);
            }
        }

        while (!stack.isEmpty()) {
            result.append(stack.pop());
        }

        return result.toString();
    }

    static String infixToPrefix(String exp) {
        String reversedExp = reverse(exp);

        StringBuilder modifiedExp = new StringBuilder();
        for (char c : reversedExp.toCharArray()) {
            if (c == '(') {
                modifiedExp.append(')');
            } else if (c == ')') {
                modifiedExp.append('(');
            } else {
                modifiedExp.append(c);
            }
        }

        String postfixExp = infixToPostfix(modifiedExp.toString());

        return reverse(postfixExp);
    }

    public static void main(String[] args) {
        String exp = "(p+q)*(m-n)";
        System.out.println("Infix Expression: " + exp);
        System.out.println("Prefix Expression: " + infixToPrefix(exp));
    }
}
