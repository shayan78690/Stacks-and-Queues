class Solution {
    public static String infixToPostfix(String s) {
        int n = s.length();
        String ans = "";
        Stack<Character> stack = new Stack<>();
        for(int i = 0; i < n; i++) {
            char ch = s.charAt(i);
            if((ch >= 'A' && ch <= 'Z') ||
            (ch >= 'a' && ch <= 'z') || 
            (ch >= '0' && ch <= '9')
            ) {
                ans += ch;
            } else if(ch == '(') {
                stack.push(ch);
            } else if(ch == ')') {
                while(!stack.isEmpty() && stack.peek() != '(') {
                    ans += stack.pop();
                }
                stack.pop();
            } else {
                while(!stack.isEmpty() && priority(ch) <= priority(stack.peek())) {
                    ans += stack.pop();
                }
                stack.push(ch);
            }
        }
        
        while(!stack.isEmpty()) {
            ans += stack.pop();
        }
        
        return ans;
    }
    
    public static int priority(char ch) {
        switch(ch) {
            case '+':
            case '-':
                return 1;
            case '*':
            case '/':
                return 2;
            case '^':
                return 3;
        }
        return -1;
    }
}
