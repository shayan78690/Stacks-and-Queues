class Solution {
    public int sumSubarrayMins(int[] arr) {
        int n = arr.length;
        int nse[] = nextSmallerElement(arr, n);
        int pse[] = previousSmallerElement(arr, n);
        int mod = 1_000_000_007;

        long total = 0;
        for (int i = 0; i < n; i++) {
            int first = i - pse[i];
            int second = nse[i] - i;
            total = (total + (long) arr[i] * first * second) % mod;
        }
        return (int) total;
    }

    public int[] nextSmallerElement(int arr[], int n) {
        Stack<Integer> stack = new Stack<>();
        int nse[] = new int[n];
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && arr[stack.peek()] >= arr[i]) {
                stack.pop();
            }
            if (stack.isEmpty()) {
                nse[i] = n;
            } else {
                nse[i] = stack.peek();
            }
            stack.push(i);
        }
        return nse;
    }

    public int[] previousSmallerElement(int arr[], int n) {
        Stack<Integer> stack = new Stack<>();
        int pse[] = new int[n];
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && arr[stack.peek()] > arr[i]) {
                stack.pop();
            }
            if (stack.isEmpty()) {
                pse[i] = -1;
            } else {
                pse[i] = stack.peek();
            }
            stack.push(i);
        }
        return pse;
    }
}













class Solution {
    public int sumSubarrayMins(int[] arr) {
        int mod = 1_000_000_007;
        int sum = 0;
        for(int i = 0; i < arr.length; i++) {
            int min = arr[i];
            for(int j = i; j < arr.length; j++) {
                min = Math.min(arr[j], min);
                sum = (sum + min) % mod;
            }
        }
        return sum;
    }
}
