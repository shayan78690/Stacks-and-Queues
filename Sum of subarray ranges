class Solution {
    public long subArrayRanges(int[] nums) {
        long max = sumSubarrayMaximum(nums);
        long min = sumSubarrayMinimum(nums);
        return max - min;
    }

    public long sumSubarrayMinimum(int nums[]) {
        int n = nums.length;
        int nse[] = findNSE(nums, n);
        int pse[] = findPSE(nums, n);

        long total = 0;
        for (int i = 0; i < n; i++) {
            int left = i - pse[i];
            int right = nse[i] - i;
            total = (total + (long) nums[i] * left * right);
        }
        return total;
    }

    public int[] findNSE(int nums[], int n) {
        int nse[] = new int[n];
        Stack<Integer> stack = new Stack<>();
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && nums[stack.peek()] >= nums[i]) {
                stack.pop();
            }
            if (stack.isEmpty()) {
                nse[i] = n;
            } else {
                nse[i] = stack.peek();
            }
            stack.push(i);
        }
        return nse;
    }

    public int[] findPSE(int nums[], int n) {
        int pse[] = new int[n];
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && nums[stack.peek()] > nums[i]) {
                stack.pop();
            }
            if (stack.isEmpty()) {
                pse[i] = -1;
            } else {
                pse[i] = stack.peek();
            }
            stack.push(i);
        }
        return pse;
    }

    public long sumSubarrayMaximum(int nums[]) {
        int n = nums.length;
        int nle[] = findNLE(nums, n);
        int ple[] = findPLE(nums, n);

        long total = 0;
        for (int i = 0; i < n; i++) {
            int left = i - ple[i];
            int right = nle[i] - i;
            total = (total + (long) nums[i] * left * right);
        }
        return total;
    }

    public int[] findNLE(int nums[], int n) {
        int nle[] = new int[n];
        Stack<Integer> stack = new Stack<>();
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && nums[stack.peek()] <= nums[i]) {
                stack.pop();
            }
            if (stack.isEmpty()) {
                nle[i] = n;
            } else {
                nle[i] = stack.peek();
            }
            stack.push(i);
        }
        return nle;
    }

    public int[] findPLE(int nums[], int n) {
        int ple[] = new int[n];
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && nums[stack.peek()] < nums[i]) {
                stack.pop();
            }
            if (stack.isEmpty()) {
                ple[i] = -1;
            } else {
                ple[i] = stack.peek();
            }
            stack.push(i);
        }
        return ple;
    }
}
